# frozen_string_literal: true

# Creates `storage_tables_<%= @table_name %>`
class Create<%= @table_name.camelcase %> < ActiveRecord::Migration[<%= ActiveRecord::Migration.current_version %>]
  def up
    create_table :<%= @table_name %>, primary_key: [:record_id, :checksum, :blob_key] do |t|
      t.string     :blob_key, null: false, limit: 1
      t.string     :filename, null: false
      t.belongs_to :record,   null: false, foreign_key: { to_table: :<%= @record.table_name %> }
      t.string     :checksum, null: false
      t.datetime   :created_at, null: false
    end

    ActiveRecord::Base.connection.execute <<~SQL.squish
      ALTER TABLE <%= @table_name %>
      ADD CONSTRAINT <%= @table_name %>_blob_fkey
      FOREIGN KEY (checksum, blob_key)
      REFERENCES storage_tables_blobs (checksum, partition_key);
    SQL

    ActiveRecord::Base.connection.execute <<~SQL.squish
      CREATE TRIGGER <%= @table_name %>_attachment_created AFTER INSERT ON <%= @table_name %> FOR EACH ROW EXECUTE FUNCTION increment_attachment_counter()
    SQL

    ActiveRecord::Base.connection.execute <<~SQL.squish
      CREATE TRIGGER <%= @table_name %>_attachment_deleted AFTER INSERT ON <%= @table_name %> FOR EACH ROW EXECUTE FUNCTION decrement_attachment_counter()
    SQL
  end

  def down
    drop_table :<%= @table_name %>
  end
end
